{"version":3,"sources":["../../../src/components/widgets/NumericInput.js"],"names":["UP_ARROW","DOWN_ARROW","NumericInput","props","state","value","onChange","bind","updateValue","onKeyDown","nextProps","setState","e","keyCode","incrementValue","newValue","max","min","integerOnly","propsValue","updatedValue","Number","Math","floor","onUpdate","direction","defaultValue","step","valueUpdate","showArrows","showSlider","editableClassName","placeholder","renderArrows","renderSlider","propTypes","number","string","bool","func","isRequired","any","defaultProps"],"mappings":"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","file":"NumericInput.js","sourcesContent":["import EditableText from './EditableText';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport isNumeric from 'fast-isnumeric';\nimport Slider from 'react-rangeslider';\nimport {CarretDownIcon, CarretUpIcon} from 'plotly-icons';\n\nexport const UP_ARROW = 38;\nexport const DOWN_ARROW = 40;\n\nexport default class NumericInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {value: props.value};\n    this.onChange = this.onChange.bind(this);\n    this.updateValue = this.updateValue.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.state.value) {\n      this.setState({value: nextProps.value});\n    }\n  }\n\n  onKeyDown(e) {\n    switch (e.keyCode) {\n      case UP_ARROW:\n        this.incrementValue('increase');\n        break;\n      case DOWN_ARROW:\n        this.incrementValue('decrease');\n        break;\n      default:\n        break;\n    }\n  }\n\n  onChange(value) {\n    this.setState({value});\n  }\n\n  updateValue(newValue) {\n    const {max, min, integerOnly, value: propsValue} = this.props;\n    let updatedValue = newValue;\n\n    // When the user blurs on non-numeric data reset the component\n    // to the last known good value (this.props.value).\n    if (!isNumeric(updatedValue)) {\n      this.setState({value: propsValue});\n      return;\n    }\n\n    updatedValue = Number(updatedValue);\n    if (integerOnly) {\n      updatedValue = Math.floor(updatedValue);\n    }\n\n    if (isNumeric(min)) {\n      updatedValue = Math.max(min, updatedValue);\n    }\n\n    if (isNumeric(max)) {\n      updatedValue = Math.min(max, updatedValue);\n    }\n\n    this.props.onUpdate(updatedValue);\n  }\n\n  incrementValue(direction) {\n    const {defaultValue, min, step = 1} = this.props;\n    const {value} = this.state;\n\n    let valueUpdate;\n    if (isNumeric(value)) {\n      if (direction === 'increase') {\n        valueUpdate = value + step;\n      } else {\n        valueUpdate = value - step;\n      }\n    } else {\n      // if we are multi-valued and the user is incrementing or decrementing\n      // update with some sane value so we can \"break\" out of multi-valued mode.\n      if (isNumeric(defaultValue)) {\n        valueUpdate = defaultValue;\n      } else {\n        // TODO smarter handling depending if user decrements or increments?\n        valueUpdate = min || 0;\n      }\n    }\n\n    // incrementers blur the line between blur and onChange.\n    this.updateValue(valueUpdate);\n  }\n\n  renderArrows() {\n    if (!this.props.showArrows || this.props.showSlider) {\n      return null;\n    }\n\n    return (\n      <div className=\"numeric-input__caret-box\">\n        <div\n          className=\"numeric-input__caret js-numeric-increase\"\n          onClick={this.incrementValue.bind(this, 'increase')}\n        >\n          <CarretUpIcon className=\"numeric-top-caret-modifier\" />\n        </div>\n        <div\n          className=\"numeric-input__caret js-numeric-decrease\"\n          onClick={this.incrementValue.bind(this, 'decrease')}\n        >\n          <CarretDownIcon className=\"numeric-bottom-caret-modifier\" />\n        </div>\n      </div>\n    );\n  }\n\n  renderSlider() {\n    if (!this.props.showSlider) {\n      return null;\n    }\n\n    return (\n      <Slider\n        min={this.props.min}\n        max={this.props.max}\n        step={this.props.step}\n        value={this.state.value}\n        onChange={this.updateValue}\n        tooltip={false}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"numeric-input__wrapper\">\n        <EditableText\n          className={`numeric-input__number ${this.props.editableClassName}`}\n          placeholder={this.props.placeholder}\n          text={this.state.value}\n          type=\"text\"\n          onChange={this.onChange}\n          onUpdate={this.updateValue}\n          onKeyDown={this.onKeyDown}\n        />\n        {this.renderArrows()}\n        {this.renderSlider()}\n      </div>\n    );\n  }\n}\n\nNumericInput.propTypes = {\n  defaultValue: PropTypes.number,\n  editableClassName: PropTypes.string,\n  integerOnly: PropTypes.bool,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  onUpdate: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  showArrows: PropTypes.bool,\n  showSlider: PropTypes.bool,\n  step: PropTypes.number,\n  value: PropTypes.any,\n};\n\nNumericInput.defaultProps = {\n  showArrows: true,\n};\n"]}
{"version":3,"sources":["../../../src/components/fields/AxisCreator.js"],"names":["UnconnectedNewAxisCreator","currentAxisId","props","fullContainer","attr","currentTraceIndex","index","context","fullData","some","d","updateContainer","onUpdate","fullLayout","charAt","_subplots","length","type","UPDATE_LAYOUT","payload","update","t","tracesToAdjust","filter","Number","trace","slice","UPDATE_AXIS_REFERENCES","attrToAdjust","icon","extraComponent","canAddAxis","updateAxis","label","options","recalcAxes","u","propTypes","string","array","bool","localize","func","container","object","contextTypes","data","ConnectedNewAxisCreator","AxisCreator","isFirstTraceOfType","_","axisType","controls","getOptions","map","axisId","value","forEach","push","toUpperCase","plotly_editor_traits","is_axis_creator"],"mappings":"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","file":"AxisCreator.js","sourcesContent":["import Dropdown from './Dropdown';\nimport Info from './Info';\nimport PropTypes from 'prop-types';\nimport React, {Component, Fragment} from 'react';\nimport {EDITOR_ACTIONS} from 'lib/constants';\nimport Button from '../widgets/Button';\nimport {PlusIcon} from 'plotly-icons';\nimport {\n  connectToContainer,\n  localize,\n  traceTypeToAxisType,\n  getAxisTitle,\n  axisIdToAxisName,\n} from 'lib';\n\nclass UnconnectedNewAxisCreator extends Component {\n  canAddAxis() {\n    const currentAxisId = this.props.fullContainer[this.props.attr];\n    const currentTraceIndex = this.props.fullContainer.index;\n    return this.context.fullData.some(\n      d => d.index !== currentTraceIndex && d[this.props.attr] === currentAxisId\n    );\n  }\n\n  updateAxis() {\n    const {attr, updateContainer} = this.props;\n    const {onUpdate, fullLayout} = this.context;\n\n    updateContainer({\n      [attr]: attr.charAt(0) + (fullLayout._subplots[attr].length + 1),\n    });\n\n    if (attr === 'yaxis') {\n      onUpdate({\n        type: EDITOR_ACTIONS.UPDATE_LAYOUT,\n        payload: {\n          update: {\n            [`${attr + (fullLayout._subplots[attr].length + 1)}.side`]: 'right',\n            [`${attr +\n              (fullLayout._subplots[attr].length + 1)}.overlaying`]: 'y',\n          },\n        },\n      });\n    }\n\n    if (attr === 'xaxis') {\n      onUpdate({\n        type: EDITOR_ACTIONS.UPDATE_LAYOUT,\n        payload: {\n          update: {\n            [`${attr + (fullLayout._subplots[attr].length + 1)}.side`]: 'top',\n            [`${attr +\n              (fullLayout._subplots[attr].length + 1)}.overlaying`]: 'x',\n          },\n        },\n      });\n    }\n  }\n\n  recalcAxes(update) {\n    const currentAxisId = this.props.fullContainer[this.props.attr];\n\n    // When we select another axis, make sure no unused axes are left:\n    // does any other trace have this axisID? If so, nothing needs to change\n    if (\n      this.context.fullData.some(\n        t =>\n          t[this.props.attr] === currentAxisId &&\n          t.index !== this.props.fullContainer.index\n      )\n    ) {\n      this.props.updateContainer({[this.props.attr]: update});\n      return;\n    }\n\n    // if not, send action to readjust axis references in trace data and layout\n    const tracesToAdjust = this.context.fullData.filter(\n      trace =>\n        Number(trace[this.props.attr].slice(1)) > Number(currentAxisId.slice(1))\n    );\n\n    this.context.onUpdate({\n      type: EDITOR_ACTIONS.UPDATE_AXIS_REFERENCES,\n      payload: {tracesToAdjust, attrToAdjust: this.props.attr},\n    });\n\n    this.props.updateContainer({[this.props.attr]: update});\n  }\n\n  render() {\n    const icon = <PlusIcon />;\n    const extraComponent = this.canAddAxis() ? (\n      <Button variant=\"no-text\" icon={icon} onClick={() => this.updateAxis()} />\n    ) : (\n      <Button variant=\"no-text--disabled\" icon={icon} onClick={() => {}} />\n    );\n\n    return (\n      <Dropdown\n        label={this.props.label}\n        attr={this.props.attr}\n        clearable={false}\n        options={this.props.options}\n        updatePlot={u => this.recalcAxes(u)}\n        extraComponent={extraComponent}\n      />\n    );\n  }\n}\n\nUnconnectedNewAxisCreator.propTypes = {\n  attr: PropTypes.string,\n  label: PropTypes.string,\n  options: PropTypes.array,\n  canAddAxis: PropTypes.bool,\n  localize: PropTypes.func,\n  container: PropTypes.object,\n  fullContainer: PropTypes.object,\n  updateContainer: PropTypes.func,\n};\n\nUnconnectedNewAxisCreator.contextTypes = {\n  fullLayout: PropTypes.object,\n  data: PropTypes.array,\n  fullData: PropTypes.array,\n  onUpdate: PropTypes.func,\n};\n\nconst ConnectedNewAxisCreator = connectToContainer(UnconnectedNewAxisCreator);\n\nclass AxisCreator extends Component {\n  render() {\n    const isFirstTraceOfType =\n      this.context.data.filter(d => d.type === this.props.container.type)\n        .length === 1;\n\n    if (isFirstTraceOfType) {\n      return null;\n    }\n\n    const {localize: _} = this.props;\n    const {fullLayout} = this.context;\n    const axisType = traceTypeToAxisType(this.props.container.type);\n    const controls = [];\n\n    function getOptions(axisType) {\n      return fullLayout._subplots[axisType].map(axisId => ({\n        label: getAxisTitle(fullLayout[axisIdToAxisName(axisId)]),\n        value: axisId,\n      }));\n    }\n\n    // for the moment only cartesian subplots are supported\n    if (axisType === 'cartesian') {\n      ['xaxis', 'yaxis'].forEach((type, index) => {\n        controls.push(\n          <ConnectedNewAxisCreator\n            key={index}\n            attr={type}\n            label={type.charAt(0).toUpperCase() + ' Axis'}\n            options={getOptions(type)}\n            localize={_}\n          />\n        );\n      });\n    }\n\n    return (\n      <Fragment>\n        {controls}\n        <Info>\n          {_('You can style and position your axes in the Style > Axes Panel')}\n        </Info>\n      </Fragment>\n    );\n  }\n}\n\nAxisCreator.propTypes = {\n  localize: PropTypes.func,\n  container: PropTypes.object,\n  fullContainer: PropTypes.object,\n};\n\nAxisCreator.plotly_editor_traits = {\n  is_axis_creator: true,\n};\n\nAxisCreator.contextTypes = {\n  data: PropTypes.array,\n  fullData: PropTypes.array,\n  fullLayout: PropTypes.object,\n};\n\nexport default localize(connectToContainer(AxisCreator));\n"]}
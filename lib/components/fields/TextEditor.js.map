{"version":3,"sources":["../../../src/components/fields/TextEditor.js"],"names":["UnconnectedTextEditor","props","attr","container","htmlOnly","latexOnly","_","localize","multiValued","richTextOnly","updatePlot","fullValue","placeholder","editor","propTypes","any","bool","func","LocalizedTextEditor","modifyPlotProps","context","plotProps","isVisible"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,qB;;;;;;;;;;;6BACK;AAAA,mBAUH,KAAKC,KAVF;AAAA,UAELC,IAFK,UAELA,IAFK;AAAA,UAGLC,SAHK,UAGLA,SAHK;AAAA,UAILC,QAJK,UAILA,QAJK;AAAA,UAKLC,SALK,UAKLA,SALK;AAAA,UAMKC,CANL,UAMLC,QANK;AAAA,UAOLC,WAPK,UAOLA,WAPK;AAAA,UAQLC,YARK,UAQLA,YARK;AAAA,UASLC,UATK,UASLA,UATK;;;AAYP,UAAIC,YAAY,KAAKV,KAAL,CAAWU,SAA3B;;AAEA,UAAIC,oBAAJ;AACA,UAAIJ,eAAgBG,cAAc,CAACR,SAAD,IAAc,CAACA,UAAUD,IAAV,CAA7B,CAApB,EAAoE;AAClEU,sBAAcD,SAAd;AACAA,oBAAY,EAAZ;AACD;;AAED,UAAIE,eAAJ;;AAEA,UAAIR,SAAJ,EAAe;AACbO,sBAAcN,EAAE,4BAAF,CAAd;AACAO,iBACE;AACE,iBAAOF,SADT;AAEE,uBAAaC,WAFf;AAGE,oBAAUF;AAHZ,UADF;AAOD,OATD,MASO,IAAID,YAAJ,EAAkB;AACvBI,iBACE;AACE,iBAAOF,SADT;AAEE,uBAAaC,WAFf;AAGE,oBAAUF;AAHZ,UADF;AAOD,OARM,MAQA,IAAIN,QAAJ,EAAc;AACnBQ,sBAAcN,EAAE,2BAAF,CAAd;AACAO,iBACE;AACE,iBAAOF,SADT;AAEE,uBAAaC,WAFf;AAGE,oBAAUF;AAHZ,UADF;AAOD,OATM,MASA;AACLG,iBACE;AACE,iBAAOF,SADT;AAEE,uBAAaC,WAFf;AAGE,oBAAUF;AAHZ,UADF;AAOD;;AAED,aACE;AAAA;AAAW,aAAKT,KAAhB;AACE;AAAA;AAAA,YAAK,WAAU,aAAf;AAA8BY;AAA9B;AADF,OADF;AAKD;;;;;;AAGHb,sBAAsBc,SAAtB,gBACK,gBAAMA,SADX;AAEEH,aAAW,oBAAUI,GAFvB;AAGEX,YAAU,oBAAUY,IAHtB;AAIEX,aAAW,oBAAUW,IAJvB;AAKEP,gBAAc,oBAAUO,IAL1B;AAMEN,cAAY,oBAAUO;AANxB;;AASO,IAAMC,oDAAsB,mBAASlB,qBAAT,CAA5B;;kBAEQ,6BAAmBkB,mBAAnB,EAAwC;AACrDC,mBAAiB,yBAAClB,KAAD,EAAQmB,OAAR,EAAiBC,SAAjB,EAA+B;AAC9C,QAAIA,UAAUC,SAAV,IAAuBD,UAAUb,WAArC,EAAkD;AAChDa,gBAAUC,SAAV,GAAsB,KAAtB;AACD;AACF;AALoD,CAAxC,C","file":"TextEditor.js","sourcesContent":["import Field from './Field';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {connectToContainer, localize} from 'lib';\nimport LaTeX from '../widgets/text_editors/LaTeX';\nimport RichText from '../widgets/text_editors/RichText';\nimport MultiFormat from '../widgets/text_editors/MultiFormat';\nimport HTML from '../widgets/text_editors/HTML';\n\nclass UnconnectedTextEditor extends Component {\n  render() {\n    const {\n      attr,\n      container,\n      htmlOnly,\n      latexOnly,\n      localize: _,\n      multiValued,\n      richTextOnly,\n      updatePlot,\n    } = this.props;\n\n    let fullValue = this.props.fullValue;\n\n    let placeholder;\n    if (multiValued || (fullValue && (!container || !container[attr]))) {\n      placeholder = fullValue;\n      fullValue = '';\n    }\n\n    let editor;\n\n    if (latexOnly) {\n      placeholder = _('Enter LaTeX formatted text');\n      editor = (\n        <LaTeX\n          value={fullValue}\n          placeholder={placeholder}\n          onChange={updatePlot}\n        />\n      );\n    } else if (richTextOnly) {\n      editor = (\n        <RichText\n          value={fullValue}\n          placeholder={placeholder}\n          onChange={updatePlot}\n        />\n      );\n    } else if (htmlOnly) {\n      placeholder = _('Enter html formatted text');\n      editor = (\n        <HTML\n          value={fullValue}\n          placeholder={placeholder}\n          onChange={updatePlot}\n        />\n      );\n    } else {\n      editor = (\n        <MultiFormat\n          value={fullValue}\n          placeholder={placeholder}\n          onChange={updatePlot}\n        />\n      );\n    }\n\n    return (\n      <Field {...this.props}>\n        <div className=\"text-editor\">{editor}</div>\n      </Field>\n    );\n  }\n}\n\nUnconnectedTextEditor.propTypes = {\n  ...Field.propTypes,\n  fullValue: PropTypes.any,\n  htmlOnly: PropTypes.bool,\n  latexOnly: PropTypes.bool,\n  richTextOnly: PropTypes.bool,\n  updatePlot: PropTypes.func,\n};\n\nexport const LocalizedTextEditor = localize(UnconnectedTextEditor);\n\nexport default connectToContainer(LocalizedTextEditor, {\n  modifyPlotProps: (props, context, plotProps) => {\n    if (plotProps.isVisible && plotProps.multiValued) {\n      plotProps.isVisible = false;\n    }\n  },\n});\n"]}
{"version":3,"sources":["../../../src/components/fields/TraceSelector.js"],"names":["computeTraceOptionsFromSchema","schema","_","context","traceTypes","Object","keys","traces","filter","includes","t","traceOptions","value","label","indexOf","obj","traceIndex","findIndex","opt","traceType","splice","config","mapboxAccessToken","push","TraceSelector","props","updatePlot","bind","fillMeta","getValObject","fillTypes","values","v","setTraceDefaults","container","fullContainer","updateContainer","setLocals","localize","plotSchema","fullValue","uid","mode","_fullInput","type","nextProps","nextContext","assign","options","clearable","contextTypes","object","propTypes","func","isRequired","any"],"mappings":"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","file":"TraceSelector.js","sourcesContent":["import {UnconnectedDropdown} from './Dropdown';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {\n  connectToContainer,\n  traceTypeToPlotlyInitFigure,\n  localize,\n  plotlyTraceToCustomTrace,\n} from 'lib';\n\nfunction computeTraceOptionsFromSchema(schema, _, context) {\n  // Filter out Polar \"area\" type as it is fairly broken and we want to present\n  // scatter with fill as an \"area\" chart type for convenience.\n  const traceTypes = Object.keys(schema.traces).filter(\n    t => !['area', 'scattermapbox'].includes(t)\n  );\n\n  // explicit map of all supported trace types (as of plotlyjs 1.32)\n  const traceOptions = [\n    {value: 'scatter', label: _('Scatter')},\n    {value: 'box', label: _('Box')},\n    {value: 'bar', label: _('Bar')},\n    {value: 'heatmap', label: _('Heatmap')},\n    // {value: 'histogram', label: _('Histogram')},\n    // {value: 'histogram2d', label: _('2D Histogram')},\n    // {value: 'histogram2dcontour', label: _('2D Contour Histogram')},\n    {value: 'pie', label: _('Pie')},\n    {value: 'contour', label: _('Contour')},\n    {value: 'scatterternary', label: _('Ternary Scatter')},\n    // {value: 'violin', label: _('Violin')},\n    {value: 'scatter3d', label: _('3D Scatter')},\n    {value: 'surface', label: _('Surface')},\n    {value: 'mesh3d', label: _('3D Mesh')},\n    {value: 'scattergeo', label: _('Atlas Map')},\n    {value: 'choropleth', label: _('Choropleth')},\n    // {value: 'scattergl', label: _('Scatter GL')},\n    // {value: 'pointcloud', label: _('Point Cloud')},\n    // {value: 'heatmapgl', label: _('Heatmap GL')},\n    // {value: 'parcoords', label: _('Parallel Coordinates')},\n    // {value: 'sankey', label: _('Sankey')},\n    // {value: 'table', label: _('Table')},\n    // {value: 'carpet', label: _('Carpet')},\n    // {value: 'scattercarpet', label: _('Carpet Scatter')},\n    // {value: 'contourcarpet', label: _('Carpet Contour')},\n    {value: 'ohlc', label: _('OHLC')},\n    {value: 'candlestick', label: _('Candlestick')},\n    // {value: 'scatterpolar', label: _('Polar Scatter')},\n  ].filter(obj => traceTypes.indexOf(obj.value) !== -1);\n\n  const traceIndex = traceType =>\n    traceOptions.findIndex(opt => opt.value === traceType);\n\n  traceOptions.splice(\n    traceIndex('scatter') + 1,\n    0,\n    {label: _('Line'), value: 'line'},\n    {label: _('Area'), value: 'area'}\n  );\n\n  traceOptions.splice(traceIndex('scatter3d') + 1, 0, {\n    label: _('3D Line'),\n    value: 'line3d',\n  });\n\n  if (context.config && context.config.mapboxAccessToken) {\n    traceOptions.push({value: 'scattermapbox', label: _('Satellite Map')});\n  }\n\n  return traceOptions;\n}\n\nclass TraceSelector extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.updatePlot = this.updatePlot.bind(this);\n\n    let fillMeta;\n    if (props.getValObject) {\n      fillMeta = props.getValObject('fill');\n    }\n    if (fillMeta) {\n      this.fillTypes = fillMeta.values.filter(v => v !== 'none');\n    } else {\n      this.fillTypes = [\n        'tozeroy',\n        'tozerox',\n        'tonexty',\n        'tonextx',\n        'toself',\n        'tonext',\n      ];\n    }\n    this.setTraceDefaults(\n      props.container,\n      props.fullContainer,\n      props.updateContainer\n    );\n    this.setLocals(props, context);\n  }\n\n  setLocals(props, context) {\n    const _ = props.localize;\n    if (props.traceOptions) {\n      this.traceOptions = props.traceOptions;\n    } else if (context.plotSchema) {\n      this.traceOptions = computeTraceOptionsFromSchema(\n        context.plotSchema,\n        _,\n        this.context\n      );\n    } else {\n      this.traceOptions = [{label: _('Scatter'), value: 'scatter'}];\n    }\n    if (props.container) {\n      this.fullValue = plotlyTraceToCustomTrace(props.container);\n    }\n  }\n\n  setTraceDefaults(container, fullContainer, updateContainer) {\n    if (\n      container &&\n      container.uid &&\n      !container.mode &&\n      fullContainer._fullInput.type === 'scatter'\n    ) {\n      updateContainer({\n        type: 'scatter',\n        mode: fullContainer.mode || 'markers',\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    const {container, fullContainer, updateContainer} = nextProps;\n    this.setTraceDefaults(container, fullContainer, updateContainer);\n    this.setLocals(nextProps, nextContext);\n  }\n\n  updatePlot(value) {\n    const {updateContainer} = this.props;\n\n    if (updateContainer) {\n      updateContainer(traceTypeToPlotlyInitFigure(value));\n    }\n  }\n\n  render() {\n    const props = Object.assign({}, this.props, {\n      fullValue: this.fullValue,\n      updatePlot: this.updatePlot,\n      options: this.traceOptions,\n      clearable: false,\n    });\n\n    return <UnconnectedDropdown {...props} />;\n  }\n}\n\nTraceSelector.contextTypes = {\n  plotSchema: PropTypes.object,\n  config: PropTypes.object,\n};\n\nTraceSelector.propTypes = {\n  getValObject: PropTypes.func,\n  container: PropTypes.object.isRequired,\n  fullContainer: PropTypes.object.isRequired,\n  fullValue: PropTypes.any.isRequired,\n  localize: PropTypes.func,\n  updateContainer: PropTypes.func,\n};\n\nexport default connectToContainer(localize(TraceSelector));\n"]}
{"version":3,"sources":["../../../src/components/widgets/EditableText.js"],"names":["ENTER_KEYCODE","EditableText","props","handleClick","bind","handleChange","handleUpdate","handleKeyPress","getRef","c","_ref","event","target","select","onChange","value","onUpdate","keyCode","which","blur","type","className","text","disable","autoFocus","onKeyDown","placeholder","readOnly","size","propTypes","func","any","string","bool","oneOf","number","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,EAAtB;;AAEA;AACA;;IACMC,Y;;;AACJ,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA,4HACXA,KADW;;AAGjB,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,OAAnB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AACA,UAAKE,YAAL,GAAoB,MAAKA,YAAL,CAAkBF,IAAlB,OAApB;AACA,UAAKG,cAAL,GAAsB,MAAKA,cAAL,CAAoBH,IAApB,OAAtB;AACA,UAAKI,MAAL,GAAc,MAAKA,MAAL,CAAYJ,IAAZ,OAAd;AAPiB;AAQlB;;;;2BAEMK,C,EAAG;AACR,WAAKC,IAAL,GAAYD,CAAZ;AACD;;AAED;;;;gCACYE,K,EAAO;AACjBA,YAAMC,MAAN,CAAaC,MAAb;AACD;;;iCAEYF,K,EAAO;AAAA,UACXG,QADW,GACC,KAAKZ,KADN,CACXY,QADW;;;AAGlB,UAAIA,QAAJ,EAAc;AACZA,iBAASH,MAAMC,MAAN,CAAaG,KAAtB;AACD;AACF;;;iCAEYJ,K,EAAO;AAAA,UACXK,QADW,GACC,KAAKd,KADN,CACXc,QADW;;;AAGlB,UAAIA,QAAJ,EAAc;AACZA,iBAASL,MAAMC,MAAN,CAAaG,KAAtB;AACD;AACF;;;mCAEcJ,K,EAAO;AACpB;AACA,UAAI,CAACA,MAAMM,OAAN,IAAiBN,MAAMO,KAAxB,MAAmClB,aAAvC,EAAsD;AACpD,aAAKU,IAAL,CAAUS,IAAV;AACD;AACF;;;6BAEQ;AAAA,mBAWH,KAAKjB,KAXF;AAAA,UAELkB,IAFK,UAELA,IAFK;AAAA,UAGLC,SAHK,UAGLA,SAHK;AAAA,UAILC,IAJK,UAILA,IAJK;AAAA,UAKLC,OALK,UAKLA,OALK;AAAA,UAMLC,SANK,UAMLA,SANK;AAAA,UAOLC,SAPK,UAOLA,SAPK;AAAA,UAQLC,WARK,UAQLA,WARK;AAAA,UASLC,QATK,UASLA,QATK;AAAA,UAULC,IAVK,UAULA,IAVK;;AAYP,aACE;AACE,aAAK,KAAKpB,MADZ;AAEE,cAAMY,IAFR;AAGE,mBAAWC,aAAa,EAH1B;AAIE,eAAOC,IAJT;AAKE,iBAAS,KAAKnB,WALhB;AAME,kBAAU,KAAKE,YANjB;AAOE,gBAAQ,KAAKC,YAPf;AAQE,kBAAUiB,OARZ;AASE,mBAAWC,SATb;AAUE,oBAAY,KAAKjB,cAVnB;AAWE,mBAAWkB,SAXb;AAYE,qBAAaC,WAZf;AAaE,kBAAUC,QAbZ;AAcE,cAAMC;AAdR,QADF;AAkBD;;;;;;AAGH3B,aAAa4B,SAAb,GAAyB;AACvB;AACAf,YAAU,oBAAUgB,IAFG;;AAIvB;AACAd,YAAU,oBAAUc,IALG;;AAOvB;AACAL,aAAW,oBAAUK,IARE;;AAUvB;AACAR,QAAM,oBAAUS,GAXO;;AAavB;AACAL,eAAa,oBAAUM,MAdA;AAevBX,aAAW,oBAAUW,MAfE;AAgBvBT,WAAS,oBAAUU,IAhBI;AAiBvBT,aAAW,oBAAUS,IAjBE;AAkBvBN,YAAU,oBAAUM,IAlBG;AAmBvBb,QAAM,oBAAUc,KAAV,CAAgB,CAAC,MAAD,EAAS,UAAT,CAAhB,CAnBiB;AAoBvBN,QAAM,oBAAUO;AApBO,CAAzB;;AAuBAlC,aAAamC,YAAb,GAA4B;AAC1BT,YAAU,KADgB;AAE1BP,QAAM;AAFoB,CAA5B;;kBAKenB,Y","file":"EditableText.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, {Component} from 'react';\n\nconst ENTER_KEYCODE = 13;\n\n// A generic component to handle text that can be edited when the user\n// clicks on it.\nclass EditableText extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.getRef = this.getRef.bind(this);\n  }\n\n  getRef(c) {\n    this._ref = c;\n  }\n\n  // Selects/highlights all of the text in the filename input\n  handleClick(event) {\n    event.target.select();\n  }\n\n  handleChange(event) {\n    const {onChange} = this.props;\n\n    if (onChange) {\n      onChange(event.target.value);\n    }\n  }\n\n  handleUpdate(event) {\n    const {onUpdate} = this.props;\n\n    if (onUpdate) {\n      onUpdate(event.target.value);\n    }\n  }\n\n  handleKeyPress(event) {\n    // This will force handleUpdate to be called via the input's onBlur\n    if ((event.keyCode || event.which) === ENTER_KEYCODE) {\n      this._ref.blur();\n    }\n  }\n\n  render() {\n    const {\n      type,\n      className,\n      text,\n      disable,\n      autoFocus,\n      onKeyDown,\n      placeholder,\n      readOnly,\n      size,\n    } = this.props;\n    return (\n      <input\n        ref={this.getRef}\n        type={type}\n        className={className || ''}\n        value={text}\n        onClick={this.handleClick}\n        onChange={this.handleChange}\n        onBlur={this.handleUpdate}\n        disabled={disable}\n        autoFocus={autoFocus}\n        onKeyPress={this.handleKeyPress}\n        onKeyDown={onKeyDown}\n        placeholder={placeholder}\n        readOnly={readOnly}\n        size={size}\n      />\n    );\n  }\n}\n\nEditableText.propTypes = {\n  // Called with input value on changes (as the user types)\n  onChange: PropTypes.func,\n\n  // Called with input value on blur (and enter if no onEnter is given)\n  onUpdate: PropTypes.func,\n\n  // Called on input keyDown events\n  onKeyDown: PropTypes.func,\n\n  // Input value property ...\n  text: PropTypes.any,\n\n  // Input properties\n  placeholder: PropTypes.string,\n  className: PropTypes.string,\n  disable: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  type: PropTypes.oneOf(['text', 'password']),\n  size: PropTypes.number,\n};\n\nEditableText.defaultProps = {\n  readOnly: false,\n  type: 'text',\n};\n\nexport default EditableText;\n"]}
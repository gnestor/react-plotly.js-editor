{"version":3,"sources":["../../../src/components/containers/TraceAccordion.js"],"names":["TraceFold","TraceAccordion","context","data","props","canAdd","canGroup","children","messageIfEmptyFold","_","localize","individualTraces","length","map","d","i","addAction","label","handler","onUpdate","type","ADD_TRACE","tracesByGroup","reduce","allTraces","nextTrace","index","traceType","push","groupedTraces","Object","keys","filter","includes","contextTypes","fullData","array","propTypes","func","node","bool","string"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,IAAMA,YAAY,4CAAlB;;IAEMC,c;;;;;;;;;;;6BACK;AAAA;;AAAA,0BACa,KAAKC,OADlB,CACAC,IADA;AAAA,UACAA,IADA,iCACO,EADP;AAAA,mBAQH,KAAKC,KARF;AAAA,UAGLC,MAHK,UAGLA,MAHK;AAAA,UAILC,QAJK,UAILA,QAJK;AAAA,UAKLC,QALK,UAKLA,QALK;AAAA,UAMLC,kBANK,UAMLA,kBANK;AAAA,UAOKC,CAPL,UAOLC,QAPK;;;AAUP,UAAMC,mBACJR,KAAKS,MAAL,IACAT,KAAKU,GAAL,CAAS,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACjB,eACE;AAAC,mBAAD;AAAA;AACE,iBAAKA,CADP;AAEE,0BAAc,CAACA,CAAD,CAFhB;AAGE,uBAAWV,MAHb;AAIE,4BAAgBG;AAJlB;AAMGD;AANH,SADF;AAUD,OAXD,CAFF;;AAeA,UAAIF,MAAJ,EAAY;AACV,YAAMW,YAAY;AAChBC,iBAAOR,EAAE,OAAF,CADS;AAEhBS,mBAAS,uBAAgB;AAAA,gBAAdC,QAAc,QAAdA,QAAc;;AACvB,gBAAIA,QAAJ,EAAc;AACZA,uBAAS;AACPC,sBAAM,0BAAeC;AADd,eAAT;AAGD;AACF;AARe,SAAlB;AAUA,eACE;AAAA;AAAA,YAAO,WAAWL,SAAlB;AACGL,6BAAmBA,gBAAnB,GAAsC;AADzC,SADF;AAKD;AACD,UAAMW,gBAAgBnB,KAAKoB,MAAL,CAAY,UAACC,SAAD,EAAYC,SAAZ,EAAuBC,KAAvB,EAAiC;AACjE,YAAMC,YAAY,mCAAyBF,SAAzB,CAAlB;AACA,YAAI,CAACD,UAAUG,SAAV,CAAL,EAA2B;AACzBH,oBAAUG,SAAV,IAAuB,EAAvB;AACD;AACDH,kBAAUG,SAAV,EAAqBC,IAArB,CAA0BF,KAA1B;AACA,eAAOF,SAAP;AACD,OAPqB,EAOnB,EAPmB,CAAtB;;AASA,UAAMK,gBAAgBC,OAAOC,IAAP,CAAYT,aAAZ,EACnBU,MADmB,CACZ;AAAA,eAAa,CAAC,CAAC,MAAD,EAAS,aAAT,EAAwBC,QAAxB,CAAiCN,SAAjC,CAAd;AAAA,OADY,EAEnBd,GAFmB,CAEf,UAACc,SAAD,EAAYD,KAAZ,EAAsB;AACzB,eACE;AAAC,mBAAD;AAAA;AACE,iBAAKA,KADP;AAEE,0BAAcJ,cAAcK,SAAd,CAFhB;AAGE,kBAAMA;AAHR;AAKG,iBAAKvB,KAAL,CAAWG;AALd,SADF;AASD,OAZmB,CAAtB;;AAcA,UAAID,YAAYH,KAAKS,MAAL,GAAc,CAA1B,IAA+BiB,cAAcjB,MAAd,GAAuB,CAA1D,EAA6D;AAC3D,eACE;AAAA;AAAA,YAAoB,eAApB;AACE;AAAA;AAAA;AACE;AAAA;AAAA;AACE;AAAA;AAAA;AAAMH,kBAAE,YAAF;AAAN,eADF;AAEE;AAAA;AAAA;AAAMA,kBAAE,YAAF;AAAN;AAFF,aADF;AAKE;AAAA;AAAA;AACE;AAAA;AAAA;AAAQoB,gCAAgBA,aAAhB,GAAgC;AAAxC;AADF,aALF;AAQE;AAAA;AAAA;AACE;AAAA;AAAA;AAAQlB,mCAAmBA,gBAAnB,GAAsC;AAA9C;AADF;AARF;AADF,SADF;AAgBD;AACD,aACE;AAAA;AAAA;AACGA,2BAAmBA,gBAAnB,GAAsC;AADzC,OADF;AAKD;;;;;;AAGHV,eAAeiC,YAAf,GAA8B;AAC5BC,YAAU,oBAAUC,KADQ;AAE5BjC,QAAM,oBAAUiC;AAFY,CAA9B;;AAKAnC,eAAeoC,SAAf,GAA2B;AACzB3B,YAAU,oBAAU4B,IADK;AAEzB/B,YAAU,oBAAUgC,IAFK;AAGzBlC,UAAQ,oBAAUmC,IAHO;AAIzBlC,YAAU,oBAAUkC,IAJK;AAKzBhC,sBAAoB,oBAAUiC;AALL,CAA3B;;kBAQe,mBAASxC,cAAT,C","file":"TraceAccordion.js","sourcesContent":["import Fold from './Fold';\nimport TraceRequiredPanel from './TraceRequiredPanel';\nimport Panel from './Panel';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {EDITOR_ACTIONS} from 'lib/constants';\nimport {connectTraceToPlot, localize, plotlyTraceToCustomTrace} from 'lib';\nimport {Tab, Tabs, TabList, TabPanel} from 'react-tabs';\n\nconst TraceFold = connectTraceToPlot(Fold);\n\nclass TraceAccordion extends Component {\n  render() {\n    const {data = []} = this.context;\n    const {\n      canAdd,\n      canGroup,\n      children,\n      messageIfEmptyFold,\n      localize: _,\n    } = this.props;\n\n    const individualTraces =\n      data.length &&\n      data.map((d, i) => {\n        return (\n          <TraceFold\n            key={i}\n            traceIndexes={[i]}\n            canDelete={canAdd}\n            messageIfEmpty={messageIfEmptyFold}\n          >\n            {children}\n          </TraceFold>\n        );\n      });\n\n    if (canAdd) {\n      const addAction = {\n        label: _('Trace'),\n        handler: ({onUpdate}) => {\n          if (onUpdate) {\n            onUpdate({\n              type: EDITOR_ACTIONS.ADD_TRACE,\n            });\n          }\n        },\n      };\n      return (\n        <Panel addAction={addAction}>\n          {individualTraces ? individualTraces : null}\n        </Panel>\n      );\n    }\n    const tracesByGroup = data.reduce((allTraces, nextTrace, index) => {\n      const traceType = plotlyTraceToCustomTrace(nextTrace);\n      if (!allTraces[traceType]) {\n        allTraces[traceType] = [];\n      }\n      allTraces[traceType].push(index);\n      return allTraces;\n    }, {});\n\n    const groupedTraces = Object.keys(tracesByGroup)\n      .filter(traceType => !['ohlc', 'candlestick'].includes(traceType))\n      .map((traceType, index) => {\n        return (\n          <TraceFold\n            key={index}\n            traceIndexes={tracesByGroup[traceType]}\n            name={traceType}\n          >\n            {this.props.children}\n          </TraceFold>\n        );\n      });\n\n    if (canGroup && data.length > 1 && groupedTraces.length > 0) {\n      return (\n        <TraceRequiredPanel noPadding>\n          <Tabs>\n            <TabList>\n              <Tab>{_('All Traces')}</Tab>\n              <Tab>{_('Individual')}</Tab>\n            </TabList>\n            <TabPanel>\n              <Panel>{groupedTraces ? groupedTraces : null}</Panel>\n            </TabPanel>\n            <TabPanel>\n              <Panel>{individualTraces ? individualTraces : null}</Panel>\n            </TabPanel>\n          </Tabs>\n        </TraceRequiredPanel>\n      );\n    }\n    return (\n      <TraceRequiredPanel>\n        {individualTraces ? individualTraces : null}\n      </TraceRequiredPanel>\n    );\n  }\n}\n\nTraceAccordion.contextTypes = {\n  fullData: PropTypes.array,\n  data: PropTypes.array,\n};\n\nTraceAccordion.propTypes = {\n  localize: PropTypes.func,\n  children: PropTypes.node,\n  canAdd: PropTypes.bool,\n  canGroup: PropTypes.bool,\n  messageIfEmptyFold: PropTypes.string,\n};\n\nexport default localize(TraceAccordion);\n"]}
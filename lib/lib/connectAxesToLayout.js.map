{"version":3,"sources":["../../src/lib/connectAxesToLayout.js"],"names":["connectAxesToLayout","computeAxesOptions","axes","_","options","label","value","i","length","ax","_name","split","_subplot","includes","trim","axisGroup","_axisGroup","title","WrappedComponent","AxesConnectedComponent","props","context","state","axesTarget","defaultAxesTarget","axesTargetHandler","bind","updateContainer","setLocals","nextProps","nextState","nextContext","container","fullContainer","axesOptions","localize","multiValuedContainer","slice","forEach","Object","keys","key","searchArrays","defaultContainer","get","setState","update","newUpdate","j","subplot","axesKey","newkey","displayName","propTypes","string","func","defaultProps","contextTypes","object","isRequired","childContextTypes","array","plotly_editor_traits"],"mappings":"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","file":"connectAxesToLayout.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport nestedProperty from 'plotly.js/src/lib/nested_property';\nimport {deepCopyPublic, setMultiValuedContainer} from './multiValues';\nimport {\n  capitalize,\n  getAllAxes,\n  getDisplayName,\n  localize,\n  getAxisTitle,\n} from '../lib';\n\nfunction computeAxesOptions(axes, _) {\n  const options = [{label: _('All'), value: 'allaxes'}];\n  for (let i = 0; i < axes.length; i++) {\n    const ax = axes[i];\n    const label = capitalize(ax._name.split('axis')[0]);\n    const value = (ax._subplot &&\n    !ax._subplot.includes('xaxis') &&\n    !ax._subplot.includes('yaxis')\n      ? ax._subplot + '.' + ax._name\n      : ax._subplot\n    ).trim();\n\n    options[i + 1] = {\n      label,\n      value,\n      axisGroup: ax._axisGroup,\n      title: getAxisTitle(ax),\n    };\n  }\n\n  return options;\n}\n\nexport default function connectAxesToLayout(WrappedComponent) {\n  class AxesConnectedComponent extends Component {\n    constructor(props, context) {\n      super(props, context);\n\n      this.state = {axesTarget: this.props.defaultAxesTarget};\n      this.axesTargetHandler = this.axesTargetHandler.bind(this);\n      this.updateContainer = this.updateContainer.bind(this);\n\n      this.setLocals(props, this.state, context);\n    }\n\n    componentWillUpdate(nextProps, nextState, nextContext) {\n      // This is not enough, what if plotly.js adds new axes...\n      this.setLocals(nextProps, nextState, nextContext);\n    }\n\n    setLocals(nextProps, nextState, nextContext) {\n      const {container, fullContainer} = nextContext;\n      const {axesTarget} = nextState;\n\n      this.axes = getAllAxes(fullContainer);\n      this.axesOptions = computeAxesOptions(this.axes, nextProps.localize);\n\n      if (axesTarget === 'allaxes') {\n        const multiValuedContainer = deepCopyPublic(this.axes[0]);\n        this.axes.slice(1).forEach(ax =>\n          Object.keys(ax).forEach(key =>\n            setMultiValuedContainer(multiValuedContainer, ax, key, {\n              searchArrays: true,\n            })\n          )\n        );\n        this.fullContainer = multiValuedContainer;\n        this.defaultContainer = this.axes[0];\n        this.container = {};\n      } else {\n        this.fullContainer = nestedProperty(fullContainer, axesTarget).get();\n        this.container = this.container =\n          nestedProperty(container, axesTarget).get() || {};\n      }\n    }\n\n    getChildContext() {\n      return {\n        axesOptions: this.axesOptions,\n        axesTarget: this.state.axesTarget,\n        axesTargetHandler: this.axesTargetHandler,\n        container: this.container,\n        defaultContainer: this.defaultContainer,\n        fullContainer: this.fullContainer,\n        updateContainer: this.updateContainer,\n      };\n    }\n\n    axesTargetHandler(axesTarget) {\n      this.setState({axesTarget});\n    }\n\n    updateContainer(update) {\n      const newUpdate = {};\n      const {axesTarget} = this.state;\n\n      let axes = this.axes;\n      if (axesTarget !== 'allaxes') {\n        // only the selected container\n        axes = [this.fullContainer];\n      }\n\n      const keys = Object.keys(update);\n      for (let i = 0; i < keys.length; i++) {\n        for (let j = 0; j < axes.length; j++) {\n          const subplot = axes[j]._subplot;\n          let axesKey = axes[j]._name;\n\n          if (\n            subplot &&\n            !subplot.includes('xaxis') &&\n            !subplot.includes('yaxis')\n          ) {\n            axesKey = `${subplot}.${axesKey}`;\n          }\n\n          const newkey = `${axesKey}.${keys[i]}`;\n          newUpdate[newkey] = update[keys[i]];\n        }\n      }\n\n      this.context.updateContainer(newUpdate);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  AxesConnectedComponent.displayName = `AxesConnected${getDisplayName(\n    WrappedComponent\n  )}`;\n\n  AxesConnectedComponent.propTypes = {\n    defaultAxesTarget: PropTypes.string,\n    localize: PropTypes.func,\n  };\n\n  AxesConnectedComponent.defaultProps = {\n    defaultAxesTarget: 'allaxes',\n  };\n\n  AxesConnectedComponent.contextTypes = {\n    container: PropTypes.object.isRequired,\n    fullContainer: PropTypes.object.isRequired,\n    updateContainer: PropTypes.func,\n  };\n\n  AxesConnectedComponent.childContextTypes = {\n    axesOptions: PropTypes.array,\n    axesTarget: PropTypes.string,\n    axesTargetHandler: PropTypes.func,\n    container: PropTypes.object,\n    defaultContainer: PropTypes.object,\n    fullContainer: PropTypes.object,\n    updateContainer: PropTypes.func,\n  };\n\n  const {plotly_editor_traits} = WrappedComponent;\n  AxesConnectedComponent.plotly_editor_traits = plotly_editor_traits;\n\n  return localize(AxesConnectedComponent);\n}\n"]}
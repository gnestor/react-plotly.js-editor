{"version":3,"sources":["../../../src/components/containers/Fold.js"],"names":["Fold","props","context","foldVisible","determineVisibility","nextProps","nextContext","Children","forEach","children","child","attr","plotProps","type","supplyPlotProps","modifyPlotProps","isVisible","messageIfEmpty","deleteContainer","canDelete","className","folded","toggleFold","hideHeader","Icon","icon","name","doDelete","contentClass","headerClass","arrowClass","arrowIcon","deleteButton","handleClick","foldHeader","foldContent","classes","plotly_editor_traits","foldable","propTypes","bool","node","string","isRequired","func","oneOfType","localize","contextTypes","Object","assign"],"mappings":"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","file":"Fold.js","sourcesContent":["import FoldEmpty from './FoldEmpty';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport classnames from 'classnames';\nimport {CloseIcon, AngleDownIcon} from 'plotly-icons';\nimport {\n  unpackPlotProps,\n  localize,\n  containerConnectedContextTypes,\n  striptags,\n} from 'lib';\n\nclass Fold extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.foldVisible = false;\n    this.determineVisibility(props, context);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.determineVisibility(nextProps, nextContext);\n  }\n\n  determineVisibility(nextProps, nextContext) {\n    this.foldVisible = false;\n\n    React.Children.forEach(nextProps.children, child => {\n      if (child.props.attr) {\n        let plotProps;\n        if (child.type.supplyPlotProps) {\n          plotProps = child.type.supplyPlotProps(child.props, nextContext);\n          if (child.type.modifyPlotProps) {\n            child.type.modifyPlotProps(child.props, nextContext, plotProps);\n          }\n        } else {\n          plotProps = unpackPlotProps(child.props, nextContext);\n        }\n\n        if (plotProps.isVisible) {\n          this.foldVisible = true;\n          return;\n        }\n      }\n    });\n  }\n\n  render() {\n    if (!this.foldVisible && !this.props.messageIfEmpty) {\n      return null;\n    }\n    const {deleteContainer} = this.context;\n    const {\n      canDelete,\n      children,\n      className,\n      folded,\n      toggleFold,\n      hideHeader,\n      icon: Icon,\n      messageIfEmpty,\n      name,\n    } = this.props;\n\n    const doDelete = typeof deleteContainer === 'function' && canDelete;\n\n    const contentClass = classnames('fold__content', {\n      'fold__content--noheader': hideHeader,\n    });\n\n    const headerClass = classnames('fold__top', {\n      'fold__top--open': !folded,\n    });\n\n    const arrowClass = classnames('fold__top__arrow', {\n      'fold__top__arrow--open': !folded,\n    });\n\n    const arrowIcon = (\n      <div className={arrowClass}>\n        <div className=\"fold__top__arrow__wrapper\">\n          <AngleDownIcon />\n        </div>\n      </div>\n    );\n\n    const deleteButton = handleClick =>\n      doDelete ? (\n        <div\n          className=\"fold__top__delete js-fold__delete\"\n          onClick={handleClick}\n        >\n          <CloseIcon />\n        </div>\n      ) : null;\n\n    const icon = Icon ? <Icon className=\"fold__top__icon\" /> : null;\n\n    const foldHeader = !hideHeader && (\n      <div className={headerClass} onClick={toggleFold}>\n        <div className=\"fold__top__arrow-title\">\n          {arrowIcon}\n          {icon}\n          <div className=\"fold__top__title\">{striptags(name)}</div>\n        </div>\n        {deleteButton(deleteContainer)}\n      </div>\n    );\n\n    let foldContent = null;\n    if (!folded) {\n      if (this.foldVisible) {\n        foldContent = <div className={contentClass}>{children}</div>;\n      } else {\n        foldContent = (\n          <div className={contentClass}>\n            <FoldEmpty icon={Icon} messagePrimary={messageIfEmpty} />\n          </div>\n        );\n      }\n    }\n\n    const classes = className ? ' ' + className : '';\n\n    return (\n      <div className={`fold${classes}`}>\n        {foldHeader}\n        {foldContent}\n      </div>\n    );\n  }\n}\n\nFold.plotly_editor_traits = {foldable: true};\n\nFold.propTypes = {\n  canDelete: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  folded: PropTypes.bool.isRequired,\n  toggleFold: PropTypes.func.isRequired,\n  hideHeader: PropTypes.bool,\n  icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  messageIfEmpty: PropTypes.string,\n  localize: PropTypes.func,\n  name: PropTypes.string,\n};\n\nFold.contextTypes = Object.assign(\n  {\n    deleteContainer: PropTypes.func,\n  },\n  containerConnectedContextTypes\n);\n\nexport default localize(Fold);\n"]}
{"version":3,"sources":["../../src/lib/connectToContainer.js"],"names":["connectToContainer","containerConnectedContextTypes","container","object","data","array","defaultContainer","fullContainer","fullData","fullLayout","getValObject","func","graphDiv","layout","onUpdate","plotly","updateContainer","WrappedComponent","config","ContainerConnectedComponent","props","context","supplyPlotProps","plotProps","modifyPlotProps","setLocals","nextProps","nextContext","Object","assign","isVisible","displayName","contextTypes","plotly_editor_traits"],"mappings":"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","file":"connectToContainer.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport unpackPlotProps from './unpackPlotProps';\nimport {getDisplayName} from '../lib';\n\nexport const containerConnectedContextTypes = {\n  container: PropTypes.object,\n  data: PropTypes.array,\n  defaultContainer: PropTypes.object,\n  fullContainer: PropTypes.object,\n  fullData: PropTypes.array,\n  fullLayout: PropTypes.object,\n  getValObject: PropTypes.func,\n  graphDiv: PropTypes.object,\n  layout: PropTypes.object,\n  onUpdate: PropTypes.func,\n  plotly: PropTypes.object,\n  updateContainer: PropTypes.func,\n};\n\nexport default function connectToContainer(WrappedComponent, config = {}) {\n  class ContainerConnectedComponent extends Component {\n    // The most recent supplyPlotProps is used to supply the initial plotProps.\n    // This means any config routines are run before the inner components.\n    static supplyPlotProps(props, context) {\n      if (config.supplyPlotProps) {\n        return config.supplyPlotProps(props, context);\n      }\n      if (WrappedComponent.supplyPlotProps) {\n        return WrappedComponent.supplyPlotProps(props, context);\n      }\n      return unpackPlotProps(props, context);\n    }\n\n    // Run the inner modifications first and allow more recent modifyPlotProp\n    // config function to modify last.\n    static modifyPlotProps(props, context, plotProps) {\n      if (WrappedComponent.modifyPlotProps) {\n        WrappedComponent.modifyPlotProps(props, context, plotProps);\n      }\n      if (config.modifyPlotProps) {\n        config.modifyPlotProps(props, context, plotProps);\n      }\n    }\n\n    constructor(props, context) {\n      super(props, context);\n\n      this.setLocals(props, context);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n      this.setLocals(nextProps, nextContext);\n    }\n\n    setLocals(props, context) {\n      if (props.plotProps) {\n        // If we have already been connected with plotProps and computed their\n        // values then we do not need to recompute them.\n        this.plotProps = props.plotProps;\n      } else {\n        // Otherwise, this is just a bare component (not in a section) and it needs\n        // processing:\n        this.plotProps = ContainerConnectedComponent.supplyPlotProps(\n          props,\n          context\n        );\n        ContainerConnectedComponent.modifyPlotProps(\n          props,\n          context,\n          this.plotProps\n        );\n      }\n    }\n\n    render() {\n      // Merge plotprops onto props so leaf components only need worry about\n      // props. However pass plotProps as a specific prop in case inner component\n      // is also wrapped by a component that `unpackPlotProps`. That way inner\n      // component can skip computation as it can see plotProps is already defined.\n      const {plotProps = this.plotProps, ...props} = Object.assign(\n        {},\n        this.plotProps,\n        this.props\n      );\n      if (props.isVisible && props.container) {\n        return <WrappedComponent {...props} plotProps={plotProps} />;\n      }\n\n      return null;\n    }\n  }\n\n  ContainerConnectedComponent.displayName = `ContainerConnected${getDisplayName(\n    WrappedComponent\n  )}`;\n\n  ContainerConnectedComponent.contextTypes = containerConnectedContextTypes;\n\n  const {plotly_editor_traits} = WrappedComponent;\n  ContainerConnectedComponent.plotly_editor_traits = plotly_editor_traits;\n\n  return ContainerConnectedComponent;\n}\n"]}
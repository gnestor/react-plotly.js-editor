{"version":3,"sources":["../../../src/components/fields/DataSelector.js"],"names":["attributeIsData","meta","valType","arrayOk","UnconnectedDataSelector","props","context","updatePlot","bind","setLocals","nextProps","nextContext","dataSources","dataSourceOptions","dataSrcExists","attrMeta","srcAttr","attr","srcProperty","container","fullValue","get","is2D","includes","type","value","updateContainer","update","Array","isArray","filter","v","map","label","newLabel","traceType","dataSourceOptionRenderer","dataSourceValueRenderer","propTypes","any","func","object","contextTypes","array","modifyPlotProps","plotProps","isVisible"],"mappings":"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","file":"DataSelector.js","sourcesContent":["import DropdownWidget from '../widgets/Dropdown';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport Field from './Field';\nimport nestedProperty from 'plotly.js/src/lib/nested_property';\nimport {connectToContainer} from 'lib';\n\nexport function attributeIsData(meta = {}) {\n  return meta.valType === 'data_array' || meta.arrayOk;\n}\n\nexport class UnconnectedDataSelector extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.updatePlot = this.updatePlot.bind(this);\n    this.setLocals(props, context);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.setLocals(nextProps, nextContext);\n  }\n\n  setLocals(props, context) {\n    this.dataSources = context.dataSources || {};\n    this.dataSourceOptions = context.dataSourceOptions || [];\n    this.dataSrcExists = false;\n    if (attributeIsData(props.attrMeta)) {\n      this.dataSrcExists = true;\n      this.srcAttr = props.attr + 'src';\n      this.srcProperty = nestedProperty(props.container, this.srcAttr);\n    }\n\n    if (this.dataSrcExists) {\n      this.fullValue = this.srcProperty.get();\n    } else {\n      this.fullValue = this.props.fullValue;\n    }\n\n    this.is2D =\n      props.attr === 'z' &&\n      ['contour', 'heatmap', 'surface'].includes(props.container.type);\n  }\n\n  updatePlot(value) {\n    if (!this.props.updateContainer) {\n      return;\n    }\n    const update = {};\n\n    if (Array.isArray(value)) {\n      update[this.props.attr] = value\n        .filter(v => Array.isArray(this.dataSources[v]))\n        .map(v => this.dataSources[v]);\n      update[this.srcAttr] = value;\n    } else {\n      update[this.srcAttr] = value;\n      update[this.props.attr] = this.dataSources[value] || null;\n    }\n\n    this.props.updateContainer(update);\n  }\n\n  render() {\n    const {label} = this.props;\n    let newLabel;\n    if (typeof label === 'object') {\n      const traceType = this.props.container.type;\n      if (label[traceType]) {\n        newLabel = label[traceType];\n      } else {\n        newLabel = label['*'];\n      }\n    } else {\n      newLabel = label;\n    }\n\n    return (\n      <Field {...{...this.props, label: newLabel}}>\n        <DropdownWidget\n          options={this.dataSourceOptions}\n          value={this.fullValue}\n          onChange={this.updatePlot}\n          multi={this.is2D}\n          optionRenderer={this.context.dataSourceOptionRenderer}\n          valueRenderer={this.context.dataSourceValueRenderer}\n          clearable={true}\n        />\n      </Field>\n    );\n  }\n}\n\nUnconnectedDataSelector.propTypes = {\n  fullValue: PropTypes.any,\n  updatePlot: PropTypes.func,\n  container: PropTypes.object,\n  ...Field.propTypes,\n};\n\nUnconnectedDataSelector.contextTypes = {\n  dataSources: PropTypes.object,\n  dataSourceOptions: PropTypes.array,\n  dataSourceValueRenderer: PropTypes.func,\n  dataSourceOptionRenderer: PropTypes.func,\n};\n\nfunction modifyPlotProps(props, context, plotProps) {\n  if (attributeIsData(plotProps.attrMeta)) {\n    plotProps.isVisible = true;\n  }\n}\n\nexport default connectToContainer(UnconnectedDataSelector, {modifyPlotProps});\n"]}
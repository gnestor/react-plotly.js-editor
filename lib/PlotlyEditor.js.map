{"version":3,"sources":["../src/PlotlyEditor.js"],"names":["PlotlyEditor","props","context","plotly","plotSchema","PlotSchema","get","nextProps","revision","dataSources","dataSourceOptions","gd","graphDiv","config","_context","data","dataSourceValueRenderer","dataSourceOptionRenderer","dictionaries","fullData","_fullData","fullLayout","_fullLayout","layout","locale","onUpdate","handleUpdate","bind","type","payload","UPDATE_TRACES","beforeUpdateTraces","traceIndexes","update","i","length","attr","traceIndex","prop","value","set","afterUpdateTraces","UPDATE_LAYOUT","beforeUpdateLayout","afterUpdateLayout","UPDATE_AXIS_REFERENCES","tracesToAdjust","forEach","axis","trace","attrToAdjust","charAt","currentAxisIdNumber","Number","slice","adjustedAxisIdNumber","currentAxisLayoutProperties","index","ADD_TRACE","beforeAddTrace","push","mode","afterAddTrace","DELETE_TRACE","beforeDeleteTrace","splice","afterDeleteTrace","DELETE_ANNOTATION","annotationIndex","beforeDeleteAnnotation","annotations","afterDeleteAnnotation","DELETE_SHAPE","shapeIndex","beforeDeleteShape","shapes","afterDeleteShape","DELETE_IMAGE","imageIndex","beforeDeleteImage","images","afterDeleteImage","Error","className","children","propTypes","func","node","string","array","object","any","defaultProps","childContextTypes"],"mappings":"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","file":"PlotlyEditor.js","sourcesContent":["import DefaultEditor from './DefaultEditor';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {bem} from './lib';\nimport {maybeClearAxisTypes} from './shame';\nimport {EDITOR_ACTIONS} from './lib/constants';\nimport isNumeric from 'fast-isnumeric';\nimport nestedProperty from 'plotly.js/src/lib/nested_property';\n\nclass PlotlyEditor extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    // we only need to compute this once.\n    if (this.props.plotly) {\n      this.plotSchema = this.props.plotly.PlotSchema.get();\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (\n      nextProps.revision === void 0 ||\n      nextProps.revision !== this.props.revision ||\n      nextProps.dataSources !== this.props.dataSources ||\n      nextProps.dataSourceOptions !== this.props.dataSourceOptions\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  getChildContext() {\n    const gd = this.props.graphDiv || {};\n    return {\n      config: gd._context,\n      data: gd.data,\n      dataSources: this.props.dataSources,\n      dataSourceOptions: this.props.dataSourceOptions,\n      dataSourceValueRenderer: this.props.dataSourceValueRenderer,\n      dataSourceOptionRenderer: this.props.dataSourceOptionRenderer,\n      dictionaries: this.props.dictionaries || {},\n      fullData: gd._fullData,\n      fullLayout: gd._fullLayout,\n      graphDiv: gd,\n      layout: gd.layout,\n      locale: this.props.locale,\n      onUpdate: this.handleUpdate.bind(this),\n      plotSchema: this.plotSchema,\n      plotly: this.props.plotly,\n    };\n  }\n\n  handleUpdate({type, payload}) {\n    const {graphDiv} = this.props;\n\n    switch (type) {\n      case EDITOR_ACTIONS.UPDATE_TRACES:\n        if (this.props.beforeUpdateTraces) {\n          this.props.beforeUpdateTraces(payload);\n        }\n\n        // until we start utilizing Plotly.react in `react-plotly.js`\n        // force clear axes types when a `src` has changed.\n        maybeClearAxisTypes(graphDiv, payload.traceIndexes, payload.update);\n\n        for (let i = 0; i < payload.traceIndexes.length; i++) {\n          for (const attr in payload.update) {\n            const traceIndex = payload.traceIndexes[i];\n            const prop = nestedProperty(graphDiv.data[traceIndex], attr);\n            const value = payload.update[attr];\n            if (value !== void 0) {\n              prop.set(value);\n            }\n          }\n        }\n        if (this.props.afterUpdateTraces) {\n          this.props.afterUpdateTraces(payload);\n        }\n        if (this.props.onUpdate) {\n          this.props.onUpdate();\n        }\n        break;\n\n      case EDITOR_ACTIONS.UPDATE_LAYOUT:\n        if (this.props.beforeUpdateLayout) {\n          this.props.beforeUpdateLayout(payload);\n        }\n        for (const attr in payload.update) {\n          const prop = nestedProperty(graphDiv.layout, attr);\n          const value = payload.update[attr];\n          if (value !== void 0) {\n            prop.set(value);\n          }\n        }\n        if (this.props.afterUpdateLayout) {\n          this.props.afterUpdateLayout(payload);\n        }\n        if (this.props.onUpdate) {\n          this.props.onUpdate();\n        }\n        break;\n\n      case EDITOR_ACTIONS.UPDATE_AXIS_REFERENCES:\n        payload.tracesToAdjust.forEach(trace => {\n          const axis = trace[payload.attrToAdjust].charAt(0);\n          // n.b: currentAxisIdNumber will never be 0, i.e. Number('x'.slice(1)),\n          // because payload.tracesToAdjust is a filter of all traces that have\n          // an axis ID above the one of the axis ID we deprecated\n          const currentAxisIdNumber = Number(\n            trace[payload.attrToAdjust].slice(1)\n          );\n          const adjustedAxisIdNumber = currentAxisIdNumber - 1;\n\n          const currentAxisLayoutProperties = {\n            ...graphDiv.layout[payload.attrToAdjust + currentAxisIdNumber],\n          };\n\n          graphDiv.data[trace.index][payload.attrToAdjust] =\n            // for cases when we're adjusting x2 => x, so that it becomes x not x1\n            adjustedAxisIdNumber === 1 ? axis : axis + adjustedAxisIdNumber;\n\n          graphDiv.layout[\n            payload.attrToAdjust + adjustedAxisIdNumber\n          ] = currentAxisLayoutProperties;\n        });\n        break;\n\n      case EDITOR_ACTIONS.ADD_TRACE:\n        if (this.props.beforeAddTrace) {\n          this.props.beforeAddTrace(payload);\n        }\n        graphDiv.data.push({type: 'scatter', mode: 'markers'});\n        if (this.props.afterAddTrace) {\n          this.props.afterAddTrace(payload);\n        }\n        if (this.props.onUpdate) {\n          this.props.onUpdate();\n        }\n        break;\n\n      case EDITOR_ACTIONS.DELETE_TRACE:\n        if (payload.traceIndexes && payload.traceIndexes.length) {\n          if (this.props.beforeDeleteTrace) {\n            this.props.beforeDeleteTrace(payload);\n          }\n          graphDiv.data.splice(payload.traceIndexes[0], 1);\n          if (this.props.afterDeleteTrace) {\n            this.props.afterDeleteTrace(payload);\n          }\n          if (this.props.onUpdate) {\n            this.props.onUpdate();\n          }\n        }\n        break;\n\n      case EDITOR_ACTIONS.DELETE_ANNOTATION:\n        if (isNumeric(payload.annotationIndex)) {\n          if (this.props.beforeDeleteAnnotation) {\n            this.props.beforeDeleteAnnotation(payload);\n          }\n          graphDiv.layout.annotations.splice(payload.annotationIndex, 1);\n          if (this.props.afterDeleteAnnotation) {\n            this.props.afterDeleteAnnotation(payload);\n          }\n          if (this.props.onUpdate) {\n            this.props.onUpdate();\n          }\n        }\n        break;\n\n      case EDITOR_ACTIONS.DELETE_SHAPE:\n        if (isNumeric(payload.shapeIndex)) {\n          if (this.props.beforeDeleteShape) {\n            this.props.beforeDeleteShape(payload);\n          }\n          graphDiv.layout.shapes.splice(payload.shapeIndex, 1);\n          if (this.props.afterDeleteShape) {\n            this.props.afterDeleteShape(payload);\n          }\n          if (this.props.onUpdate) {\n            this.props.onUpdate();\n          }\n        }\n        break;\n\n      case EDITOR_ACTIONS.DELETE_IMAGE:\n        if (isNumeric(payload.imageIndex)) {\n          if (this.props.beforeDeleteImage) {\n            this.props.beforeDeleteImage(payload);\n          }\n          graphDiv.layout.images.splice(payload.imageIndex, 1);\n          if (this.props.afterDeleteImage) {\n            this.props.afterDeleteImage(payload);\n          }\n          if (this.props.onUpdate) {\n            this.props.onUpdate();\n          }\n        }\n        break;\n\n      default:\n        throw new Error('must specify an action type to handleEditorUpdate');\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className={\n          bem('plotly-editor') +\n          ' plotly-editor--theme-provider' +\n          `${this.props.className ? ` ${this.props.className}` : ''}`\n        }\n      >\n        {this.props.graphDiv &&\n          this.props.graphDiv._fullLayout &&\n          (this.props.children ? this.props.children : <DefaultEditor />)}\n      </div>\n    );\n  }\n}\n\nPlotlyEditor.propTypes = {\n  afterAddTrace: PropTypes.func,\n  afterDeleteAnnotation: PropTypes.func,\n  afterDeleteShape: PropTypes.func,\n  afterDeleteImage: PropTypes.func,\n  afterDeleteTrace: PropTypes.func,\n  afterUpdateLayout: PropTypes.func,\n  afterUpdateTraces: PropTypes.func,\n  beforeAddTrace: PropTypes.func,\n  beforeDeleteAnnotation: PropTypes.func,\n  beforeDeleteShape: PropTypes.func,\n  beforeDeleteImage: PropTypes.func,\n  beforeDeleteTrace: PropTypes.func,\n  beforeUpdateLayout: PropTypes.func,\n  beforeUpdateTraces: PropTypes.func,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  dataSourceOptionRenderer: PropTypes.func,\n  dataSourceOptions: PropTypes.array,\n  dataSourceValueRenderer: PropTypes.func,\n  dictionaries: PropTypes.object,\n  dataSources: PropTypes.object,\n  graphDiv: PropTypes.object,\n  locale: PropTypes.string,\n  onUpdate: PropTypes.func,\n  plotly: PropTypes.object,\n  revision: PropTypes.any,\n};\n\nPlotlyEditor.defaultProps = {\n  locale: 'en',\n};\n\nPlotlyEditor.childContextTypes = {\n  config: PropTypes.object,\n  data: PropTypes.array,\n  dataSources: PropTypes.object,\n  dataSourceOptions: PropTypes.array,\n  dataSourceValueRenderer: PropTypes.func,\n  dataSourceOptionRenderer: PropTypes.func,\n  dictionaries: PropTypes.object,\n  fullData: PropTypes.array,\n  fullLayout: PropTypes.object,\n  graphDiv: PropTypes.any,\n  layout: PropTypes.object,\n  locale: PropTypes.string,\n  onUpdate: PropTypes.func,\n  plotSchema: PropTypes.object,\n  plotly: PropTypes.object,\n};\n\nexport default PlotlyEditor;\n"]}
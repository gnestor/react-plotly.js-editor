{"version":3,"sources":["../../../src/components/containers/AxisRequiredPanel.js"],"names":["AxisRequiredPanel","props","state","hasAxis","hasSubplot","Object","keys","context","fullContainer","_subplots","filter","includes","type","length","setState","checkAxisExistence","children","emptyPanelHeader","propTypes","node","string","contextTypes","object"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,iB;;;AACJ,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA,sIACXA,KADW;;AAEjB,UAAKC,KAAL,GAAa;AACXC,eAAS;AADE,KAAb;AAFiB;AAKlB;;;;yCAEoB;AAAA;;AACnB,UAAMC,aACJC,OAAOC,IAAP,CAAY,KAAKC,OAAL,CAAaC,aAAb,CAA2BC,SAAvC,EAAkDC,MAAlD,CACE;AAAA,eACE,CAAC,CAAC,WAAD,EAAc,QAAd,EAAwBC,QAAxB,CAAiCC,IAAjC,CAAD,IACA,OAAKL,OAAL,CAAaC,aAAb,CAA2BC,SAA3B,CAAqCG,IAArC,EAA2CC,MAA3C,GAAoD,CAFtD;AAAA,OADF,EAIEA,MAJF,GAIW,CALb;AAMA,UAAI,CAACT,UAAL,EAAiB;AACf,aAAKU,QAAL,CAAc,EAACX,SAAS,KAAV,EAAd;AACD;AACF;;;gDAE2B;AAC1B,WAAKY,kBAAL;AACD;;;wCAEmB;AAClB,WAAKA,kBAAL;AACD;;;6BAEQ;AACP,UAAI,KAAKb,KAAL,CAAWC,OAAf,EAAwB;AACtB,eAAO;AAAA;AAAA;AAAQ,eAAKF,KAAL,CAAWe;AAAnB,SAAP;AACD;AACD,aAAO,sDAAY,SAAS,KAAKf,KAAL,CAAWgB,gBAAhC,GAAP;AACD;;;;;;AAGHjB,kBAAkBkB,SAAlB,GAA8B;AAC5BF,YAAU,oBAAUG,IADQ;AAE5BF,oBAAkB,oBAAUG;AAFA,CAA9B;;AAKApB,kBAAkBqB,YAAlB,GAAiC;AAC/Bb,iBAAe,oBAAUc;AADM,CAAjC;;kBAIetB,iB","file":"AxisRequiredPanel.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport PanelEmpty from './PanelEmpty';\nimport Panel from './Panel';\n\nclass AxisRequiredPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasAxis: true,\n    };\n  }\n\n  checkAxisExistence() {\n    const hasSubplot =\n      Object.keys(this.context.fullContainer._subplots).filter(\n        type =>\n          !['cartesian', 'mapbox'].includes(type) &&\n          this.context.fullContainer._subplots[type].length > 0\n      ).length > 0;\n    if (!hasSubplot) {\n      this.setState({hasAxis: false});\n    }\n  }\n\n  componentWillReceiveProps() {\n    this.checkAxisExistence();\n  }\n\n  componentDidMount() {\n    this.checkAxisExistence();\n  }\n\n  render() {\n    if (this.state.hasAxis) {\n      return <Panel>{this.props.children}</Panel>;\n    }\n    return <PanelEmpty heading={this.props.emptyPanelHeader} />;\n  }\n}\n\nAxisRequiredPanel.propTypes = {\n  children: PropTypes.node,\n  emptyPanelHeader: PropTypes.string,\n};\n\nAxisRequiredPanel.contextTypes = {\n  fullContainer: PropTypes.object,\n};\n\nexport default AxisRequiredPanel;\n"]}
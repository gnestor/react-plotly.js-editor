{"version":3,"sources":["../../../src/components/containers/ShapeAccordion.js"],"names":["ShapeFold","ShapeAccordion","context","layout","shapes","props","canAdd","children","_","localize","content","length","map","shp","i","text","addAction","label","handler","updateContainer","shapeIndex","Array","isArray","key","value","line","color","fillcolor","opacity","contextTypes","object","propTypes","node","bool","func"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,YAAY,8CAAlB;;IAEMC,c;;;;;;;;;;;6BACK;AAAA,kCACyB,KAAKC,OAD9B,CACAC,MADA,CACSC,MADT;AAAA,UACSA,MADT,yCACkB,EADlB;AAAA,mBAEiC,KAAKC,KAFtC;AAAA,UAEAC,MAFA,UAEAA,MAFA;AAAA,UAEQC,QAFR,UAEQA,QAFR;AAAA,UAE4BC,CAF5B,UAEkBC,QAFlB;;;AAIP,UAAMC,UACJN,OAAOO,MAAP,IACAP,OAAOQ,GAAP,CAAW,UAACC,GAAD,EAAMC,CAAN;AAAA,eACT;AAAC,mBAAD;AAAA,YAAW,KAAKA,CAAhB,EAAmB,YAAYA,CAA/B,EAAkC,MAAMD,IAAIE,IAA5C,EAAkD,WAAWT,MAA7D;AACGC;AADH,SADS;AAAA,OAAX,CAFF;;AAQA,UAAMS,YAAY;AAChBC,eAAOT,EAAE,OAAF,CADS;AAEhBU,iBAAS,uBAA+B;AAAA,cAA7Bf,MAA6B,QAA7BA,MAA6B;AAAA,cAArBgB,eAAqB,QAArBA,eAAqB;;AACtC,cAAIC,mBAAJ;AACA,cAAIC,MAAMC,OAAN,CAAcnB,OAAOC,MAArB,CAAJ,EAAkC;AAChCgB,yBAAajB,OAAOC,MAAP,CAAcO,MAA3B;AACD,WAFD,MAEO;AACLS,yBAAa,CAAb;AACD;;AAED,cAAMG,kBAAgBH,UAAhB,MAAN;AACA,cAAMI,QAAQ;AACZT,kBAASP,EAAE,OAAF,CAAT,SAAuBY,UADX;AAEZK,kBAAM,EAACC,OAAO,SAAR,EAFM;AAGZC,uBAAW,SAHC;AAIZC,qBAAS;AAJG,WAAd;;AAOA,cAAIT,eAAJ,EAAqB;AACnBA,gDAAkBI,GAAlB,EAAwBC,KAAxB;AACD;AACF;AArBe,OAAlB;;AAwBA,aACE;AAAA;AAAA,UAAoB,WAAWlB,SAASU,SAAT,GAAqB,IAApD;AACGN,kBAAUA,OAAV,GAAoB;AADvB,OADF;AAKD;;;;;;AAGHT,eAAe4B,YAAf,GAA8B;AAC5B1B,UAAQ,oBAAU2B;AADU,CAA9B;;AAIA7B,eAAe8B,SAAf,GAA2B;AACzBxB,YAAU,oBAAUyB,IADK;AAEzB1B,UAAQ,oBAAU2B,IAFO;AAGzBxB,YAAU,oBAAUyB;AAHK,CAA3B;;kBAMe,mBAASjC,cAAT,C","file":"ShapeAccordion.js","sourcesContent":["import Fold from './Fold';\nimport TraceRequiredPanel from './TraceRequiredPanel';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectShapeToLayout, localize} from 'lib';\n\nconst ShapeFold = connectShapeToLayout(Fold);\n\nclass ShapeAccordion extends Component {\n  render() {\n    const {layout: {shapes = []}} = this.context;\n    const {canAdd, children, localize: _} = this.props;\n\n    const content =\n      shapes.length &&\n      shapes.map((shp, i) => (\n        <ShapeFold key={i} shapeIndex={i} name={shp.text} canDelete={canAdd}>\n          {children}\n        </ShapeFold>\n      ));\n\n    const addAction = {\n      label: _('Shape'),\n      handler: ({layout, updateContainer}) => {\n        let shapeIndex;\n        if (Array.isArray(layout.shapes)) {\n          shapeIndex = layout.shapes.length;\n        } else {\n          shapeIndex = 0;\n        }\n\n        const key = `shapes[${shapeIndex}]`;\n        const value = {\n          text: `${_('Shape')} ${shapeIndex}`,\n          line: {color: '#444444'},\n          fillcolor: '#7F7F7F',\n          opacity: 0.3,\n        };\n\n        if (updateContainer) {\n          updateContainer({[key]: value});\n        }\n      },\n    };\n\n    return (\n      <TraceRequiredPanel addAction={canAdd ? addAction : null}>\n        {content ? content : null}\n      </TraceRequiredPanel>\n    );\n  }\n}\n\nShapeAccordion.contextTypes = {\n  layout: PropTypes.object,\n};\n\nShapeAccordion.propTypes = {\n  children: PropTypes.node,\n  canAdd: PropTypes.bool,\n  localize: PropTypes.func,\n};\n\nexport default localize(ShapeAccordion);\n"]}